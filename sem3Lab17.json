[
  {
    "_id": "5ed75a43af521006a890287b",
    "labname": "ANALOG AND DIGITAL ELECTRONICS LABORATORY ",
    "labcode": "17CSL37",
    "descname": "Description about Lab",
    "descdata": "Any simulation package like MultiSim / P-spice /Equivalent software may be used.\nFaculty-in-charge should demonstrate and explain the required hardware components and their functional Block diagrams, timing diagrams etc. Students have to prepare a write-up on the same and include it in the Lab record and to be evaluated.\n\n Laboratory Session-1:\n Write-upon analog components; functional block diagram, Pin diagram (ifany), waveforms and description. The same information is also taught in theory class; this helps the students to understand better.\n\n Laboratory Session-2:\n Write-upon Logic design components, pin diagram (if any), Timing diagrams, etc. The same information is also taught in theory class; this helps the students to understand better.\n\n",
    "prgmlist": "Laboratory Experiments",
    "prgmlistdata": "1. a) Design and construct a Schmitt trigger using Op-Amp for given UTP and LTP values and demonstrate its working.\n b) Design and implement a Schmitt trigger using Op-Amp using a simulation package for two sets of UTP and LTP values and demonstrate its working.\n2. a) Design and construct a rectangular waveform generator (Op-Amp relaxation oscillator) for given frequency and demonstrate its working.\n b) Design and implement a rectangular waveform generator (Op-Amp relaxation oscillator) using a simulation package and demonstrate the change in frequency when all resistor values are doubled. \n3. Design and implement an Astable multivibrator circuit using 555 timer for a given frequency and duty cycle.\n\nNOTE: hardware and software results need to be compared\n\n4. Design and implement Half adder, Full Adder, Half Subtractor, Full Subtractor usingbasic gates.\n5. a) Given a 4-variable logic expression, simplify it using Entered Variable Map and realize the simplified logic expression using 8:1 multiplexer IC.\n b) Design and develop the Verilog /VHDL code for an 8:1 multiplexer. Simulate andverify its working. \n6. a) Design and implement code converter I)Binary to Gray (II) Gray to Binary Code usingbasic gates.\n7. Design and verify the Truth Table of 3-bit Parity Generator and 4-bit Parity Checker using basic Logic Gates with an even parity bit.\n 8. a) Realize a J-K Master / Slave Flip-Flop using NAND gates and verify its truth table.\n b) Design and develop the Verilog / VHDL code for D Flip-Flop with positive-edge triggering. Simulate and verify it’s working.\n 9. a) Design and implement a mod-n (n<8) synchronous up counter using J-K FlipFlop ICs and demonstrate its working.\n b) Design and develop the Verilog / VHDL code for mod-8 up counter. Simulate and verify it’s working.\n  10. Design and implement an asynchronous counter using decade counter IC to Ramp output waveform using DAC0800 (Inputs are given to DAC through IC74393 dual 4-bit binary counter).\n\nStudy experiment\n 12. To study 4-bitALU using IC-74181.",
    "labname1": "DATA STRUCTURES LABORATORY",
    "labcode1": "17CSL38",
    "descname1": "Descriptions",
    "descdata1": "Implement all the experiments in C Language under Linux / Windows environment.",
    "prgmlist1": "Laboratory Experiments",
    "prgmlistdata1": "1. Design, Develop and Implement a menu driven Program in C for the following Array operations\na. Creating an Array of N Integer Elements\nb. Display of Array Elements with Suitable Headings\nc. Inserting an Element (ELEM) at a given valid Position (POS)\nd. Deleting an Element at a given valid Position(POS)\ne. Exit.\n Support the program with functions for each of the above operations.\n\n2. Design, Develop and Implement a Program in C for the following operationson Strings\na. Read a main String (STR), a Pattern String (PAT) and a Replace String (REP)\n b. Perform Pattern Matching Operation: Find and Replace all occurrences of PAT in\n STR with REP if PAT exists in STR. Report suitable messages in case PAT does not exist in STR\nSupport the program with functions for each of the above operations. Don't use Built-in functions.\n\n 3. Design, Develop and Implement a menu driven Program in C for the following operations on STACK of Integers (Array Implementation of Stack with maximum size MAX)\n a. Push an Element on to Stack\n b. Pop an Element from Stack\n c. Demonstrate how Stack can be used to check Palindrome\n d. Demonstrate Overflow and Underflow situations on Stack\n e. Display the status of Stack\n f. Exit\n Support the program with appropriate functions for each of the above operations\n\n 4. Design, Develop and Implement a Program in C for converting an Infix Expression to Postfix Expression. Program should support for both parenthesized and free parenthesized expressions with the operators: +, -, *, /, %(Remainder), ^(Power) and alphanumeric operands.\n\n 5. Design, Develop and Implement a Program in C for the following Stack Applications a. Evaluation of Suffix expression with single digit operands and operators: +, -, *, /, %, ^\n b. Solving Tower of Hanoi problem with n disks\n\n 6. Design, Develop and Implement a menu driven Program in C for the following operations on Circular QUEUE of Characters (Array Implementation of Queue with maximum size MAX)\n a. Insert an Element on to Circular QUEUE\n b. Delete an Element from Circular QUEUE\n c. Demonstrate Overflow and Underflow situations on Circular QUEUE\n d. Display the status of Circular QUEUE\n e. Exit\n Support the program with appropriate functions for each of the above operations\n\n 7. Design, Develop and Implement a menu driven Program in C for the following operations on Singly Linked List (SLL) of Student Data with the fields: USN, Name, Branch, Sem, PhNo\n a. Create a SLL of N Students Data by using front insertion.\n b. Display the status of SLL and count the number of nodes in it\n c. Perform Insertion / Deletion at End of SLL\n d. Perform Insertion / Deletion at Front of SLL(Demonstration of stack)\n e. Exit\n 8. Design, Develop and Implement a menu driven Program in C for the following operations on Doubly Linked List (DLL) of Employee Data with the fields: SSN, Name, Dept, Designation, Sal, PhNo\n a. Create a DLL of N Employees Data by using end insertion.\n b. Display the status of DLL and count the number of nodes in it\n c. Perform Insertion and Deletion at End of DLL\n d. Perform Insertion and Deletion at Front of DLL\n e. Demonstrate how this DLL can be used as Double Ended Queue\n f. Exit\n 9. Design, Develop and Implement a Program in C for the following operationson Singly Circular Linked List (SCLL) with header nodes\n a. Represent and Evaluate a Polynomial P(x,y,z) = 6x2 y 2 z-4yz5 +3x3 yz+2xy5 z-2xyz3\n b. Find the sum of two polynomials POLY1(x,y,z) and POLY2(x,y,z) and store the result in POLYSUM(x,y,z)\n Support the program with appropriate functions for each of the above operations\n\n 10. Design, Develop and Implement a menu driven Program in C for the following operations on Binary Search Tree (BST) of Integers\n a. Create a BST of N Integers: 6, 9, 5, 2, 8, 15, 24, 14, 7, 8, 5, 2\n b. Traverse the BST in Inorder, Preorder and Post Order\n c. Search the BST for a given element (KEY) and report the appropriate message\n e. Exit\n\n 11. Design, Develop and Implement a Program in C for the following operations on Graph(G) of Cities\n a. Create a Graph of N cities using Adjacency Matrix.\n b. Print all the nodes reachable from a given starting node in a digraph using DFS/BFS method\n\n 12. Given a File of N employee records with a set K of Keys(4-digit) which uniquely determine the records in file F. Assume that file F is maintained in memory by a Hash Table(HT) of m memory locations with L as the set of memory addresses (2-digit) of locations in HT. Let the keys in K and addresses in L are Integers. Design and develop a Program in C that uses Hash function H: K →L as H(K)=K mod m (remainder method), and implement hashing technique to map a given key K to the address space L. Resolve the collision (if any) using linear probing"
  }
]
